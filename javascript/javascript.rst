############################################
JavaScript (基本)
############################################

******************************************
最初に
******************************************

コメント

TODO


出力

::

    console.log(mesg)
    console.info(mesg)
    console.warn(mesg)
    console.error(mesg)

    log(obj1)
    log(obj1, /* …, */ objN)
    log(msg)
    log(msg, subst1, /* …, */ substN)


::

    "use strict";
    'use strict';




******************************************
変数、定数、リテラル、データ型
******************************************

::

    let, var, const   // 宣言

    const --- 初期化後に値を変更できない。



    識別子
    1文字目: 英文字、_、$
    2文字目: 英文字、数字、_、$

    その他ユニコードで日本語なども使える

    大文字小文字は区別される

    一般的には camel case : anIdentifierName


    値


    プリミティブ型とオブジェクト

    プリミティブ型

            * 不変、immutable
            * 6つ
                    * 数値(Number)
                    * 文字列(String)
                    * 論理値(Boolean)
                    * null
                    * undefined


    オブジェクト

            * 配列（Array）
            * 日時（Date）
            * 正規表現（RegExp）
            * マップ（Map）とウィークマップ（WeakMap）
            * セット（Set）とウィークセット（WeakSet）





    数値
    倍精度浮動小数点数の表現（64ビット）

    数値リテラル

    // 10進数
    10, 21.5, 3.0e6, -1.6e-19
    // 16進数, 8進数, 2進数
    0xff, 0o22, 0b0101
     
    Infinity    (1/0)
     -Infinity   (-1/0)
    Nan   (Infinity/Infinity)


    文字列

    シングルクォートで囲む、ダブルクォートで囲む、どちらを使っても違いはない

    テンプレートリテラル バッククォートで囲む
    ${...} の中が式として解釈される。 $そのものを表示したいときはエスケープする。
    `現在の温度は${currentTemp}℃です。`

    エスケープ


    数値と文字列の自動変換 TODO
    3 + '30'; // 3は文字列に変換され、結果は文字列の'330'になる
    3 * '30'; // '30'は数値に変換され、結果は数値の90になる



    論理値
    true, false

    シンボル
    TODO


    Date型
        new Date()
        strftime パッケージ







******************************************
制御フロー
******************************************

TODO

::

    list.forEach(cb)
    list.filter(cb)



******************************************
式と演算子
******************************************

******************************************
関数
******************************************


関数
---------

TODO::

    関数の定義と無名関数の定義。
        funcition (res) {...}
        (res) => {...}



アロー関数::

    (param1, param2, …, paramN) => { statements } 
    (param1, param2, …, paramN) => expression
    // 上記の式は、次の式と同等です: => { return expression; }

    // 引数が 1 つしかない場合、丸括弧 () の使用は任意です:
    (singleParam) => { statements }
    singleParam => { statements }

    // 引数がない場合、丸括弧を書かねばいけません:
    () => { statements }



TODO

await
async
Promise

******************************************
スコープ
******************************************

******************************************
配列
******************************************

************************************************
オブジェクトとオブジェクト指向プログラミング
************************************************

******************************************
MapとSet
******************************************

******************************************
例外とエラー処理
******************************************

******************************************
イテレータとジェネレータ
******************************************

******************************************
非同期プログラミング
******************************************

******************************************
日時
******************************************

******************************************
Math
******************************************

******************************************
正規表現
******************************************

::

    if (/^\/api\/parsetime/.test(req.url)) {...}

